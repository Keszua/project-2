Sugeroway edytor php to VSC. 

link do dokumentacji PHP:
https://www.php.net/manual/en/ref.array.php

PSR-12  -styl formatowania tekstu (taki "czysty kod")

/*
Sugerowana wtyczka: PHP IntelliSense
Ta wtyczka wymaga wy³¹czenia "azowych sugestii" 
You need at least PHP 7 installed for the extension to work. You can either add it to your PATH or set the php.executablePath setting.
I recommend to disable VS Code's built-in PHP IntelliSense by setting php.suggest.basic to false to avoid duplicate suggestions.
*/

W Xampie nale¿y skonfigurowaæ "Configure Virtual Hosts". Wchodzi sie w niego przez wpisanie w okno przegl¹darki adresu:
http://localhost/dashboard/docs/configure-vhosts.html
W panelu Xampa naciskamy "Config" dla Apache -> <Browse> [Apache]
Przechodzimy do œcie¿ki: C:\xampp\apache\conf\extra  otwieramy plik  httpd-vhosts.conf

Do pliku doklejamy:
<VirtualHost *:80>
       DocumentRoot "C:/xampp/htdocs/"
       ServerName localhost
</VirtualHost>
<VirtualHost *:80>
       DocumentRoot "F:/Karolek/Web/Treningi/PHP"
       ServerName notes.localhost
	   <Directory "F:/Karolek/Web/Treningi/PHP">
	    Require all granted
	   </Directory>
</VirtualHost>

Dodatkowo w Windowsie, w pliku:
C:\windows\system32\drivers\etc\hosts
trzeba dodaæ:
127.0.0.1           notes.localhost

Aby dzia³a³ terminal, nale¿y dodaæ œcie¿kê do zmiennych œrodowiskowych.
W wyszukiwaniu windowsoym po wpisaniu "zmienne", wybieramy "Edytuj zmienne œrodowiskow systemu"
Klikamy na klawisz "zmienne rodowiskowe" -> w oknie "zmienne suystemowe" szukamy Path i go edytujemy. trzeba dodaæ "C:\xampp\php"


Tryby:
 - coercive - trym domyœlny, dopuszczaj¹cy rzutowanie
 - strict - œcis³y, który nie dopuszcza rzutowania		
Tryb œcis³y uruchamiamy za pomoca komendy, umieszczonej na pocz¹tku pliku:
declare(strict_types=1);

//--------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------

include("srcdebug.php");      //drugie inkludowanie tego samego pliku wygeneruje ostrze¿enie (nie przerywa skryptu)
include_once("src/ebug.php"); //pilnuje, ¿eby tylko raz dodaæ plik (mo¿na wywo³ac kilka razy)
require("src/debug.php");      //jeœli plik nie istnieje, to skrypt przerywa dzia³anie (wywala ERROR)
require_once("src/debug.php"); 


htmlentities(); //zabezpiecza, aby przegladarka nie wykonywa³a ego kodu









//--------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------


//Wyœwietlanie ci¹gów znaków:
	echo "Witaj";
	echo ("Witaj");
	echo 'Witaj </br>';

//Zmienne
	$zmiennaTekstowa = 'tekst';  //utf8
	$zmiennaLiczbowa = 23;
	$zmiennaUjemna = -23;
	$zmiennaFloat = 2.3;
	$zmiennaBoolean = true;
	$zmiennaArray = [];
	$zmiennaArray = array();
	$objekt = new stdClass();
//null - gdy nie przypiszemy wartoœci
	$nullVariable;
//resource - przechowuje odwo³¹nia do zasobu zewnêtrznego, np bazy danych

//sta³e  (bez znaku dolara)
	define('NAZWA', 10);
	const LICZNA_PI = 3.14

//sprawdzanie typu zmiennej
	var_dump($zmiennaTekstowa);  //= string(5) "tekst"
	var_dump($zmiennaLiczbowa);  //= int(23) 

//--------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------


CZAS
	echo time()."<br/>";			//wyœwietli sekundy 
	echo mktime(17, 37, 1, 9, 9, 2020 )."<br/>";  // mktime(hour, min, sec, month, day, year)  pokazuje ile sekund up³ynê³o danej daty
	echo microtime()."<br/>";  //czas podany w mikrosekundach

	echo date('Y-m-d')."<br/>";  //Y 2000, y 20;  m-month (z zerem) n-miesi¹c  M trzyliterowy;  d dzien miesi¹ca (z zerem) j dzeiñ meisiaca D trzyliterowy; 
    echo date('H:i:s')."<br/>";   // H 24godz h 12godz   G 24godz bez zera  g 12godz bez zera;     i minuty    
	echo date('Y-m-d H:i:s')."<br/>";

	$dataczas = new DateTime();
	echo $dataczas->format('Y-m-d H:i:s')."<br/>";
	//print_r($dataczas);
	$dzien = 26;
	$miesiac = 7;
	$rok = 1875;
	if(checkdate($miesiac, $dzien, $rok)) // checkdate(mon, day, yer )
		echo "By³ tak dzieñ. </br>";
	else
		echo "Sprawdz wprowadzone dane. </br>";

//--------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------

	
	
     ####                                       #
    #    #                                      #
    #    #   ####     ###    # ###    ####    #####    ###    # ###   #   #
    #    #   #   #   #   #   ##           #     #     #   #   ##      #   #
    #    #   #   #   #####   #        #####     #     #   #   #        # #
    #    #   ####    #       #       #    #     #     #   #   #         #
     ####    #        ###    #        ### #      ##    ###    #        #
             #                                                        #

			 //przypisania
$pierwsza = 1;
$pierwsza = $druga = 13; //obie zmienne otrzymaj¹ wartosæ 13
+ dodawanie;  - odejmowanie;  * mno¿enie;  / dzielenie;  % modulo;  ** potêgowanie

//Operatory konkatenacji (³¹czenia stringów), tym operatorem jest kropka
$firstName = "Jan";
$lastName = "Kowalski";
echo $firstName.$lastName;                    //= JanKowalski
echo $firstName." ".$lastName;                //= Jan Kowalski
$tekst = 'PHP';
echo $tekst .= "1.4";                         //= PHP1.4

$age = 11;
$age++;  //postinkrementacja
$++age;  //preinkrementacja
$age++;  //postdekrementacja
$++age;  //predekrementacja

== porównuje wartoœci             echo 9 == '9';  //= true
=== porównuje wartoœci i TYPY     echo 9 == '9';  //= false
!=                                echo 'foo' != 'bar' //= true
!=                                echo 9 != '9' //= false
!==                               echo 9 !== 9  //= false
!==                               echo 3 !== 1  //= true
<=> spaceship - urzywany do funkcji sortuj¹ych. 
Zwaraca 0:gdy obie wartosci sa równe; -1:gdy lew wartosæ jest mniejsza; 1:gdy lewa wartoœæ jest wiêksza
echo(92<=>92);  //= 0
echo(92<=>2);   //= 1
echo(82<=>92);  //= -1
echo('a'<=>'d'); //= -1

$age = 12;
$string1 = 'Kot Ali ma $age lat';  // po prostu wypisuje znak po znaku
echo $string1;                     //= Kot Ali ma $age lat
$string2 = "Kot Ali ma $age lat";  // string parsowany
echo $string2;                     //= Kot Ali ma 12 lat
$string3 = 'Kot Ali ma '.$age.' lat';
echo $string3;                     //= Kot Ali ma 12 lat





    #####            #       #
      #              #       #        #
      #      ####    ###     #              ###     ###
      #          #   #   #   #       ##    #   #   #   #
      #      #####   #   #   #        #    #       #####
      #     #    #   #   #   #   #    #    #   #   #
      #      ### #   ####     ###    ###    ###     ###
	  
$tablicaTestowa = ['Ala', 3, 3.14, "Elo"];
var_dump($tablicaTestowa);                       //= array(4) { [0]=> string(3) "Ala" [1]=> int(3) [2]=> float(3.14) [3]=> string(3) "Elo" } 
print_r($tablicaTestowa);                        //= Array ( [0] => Ala [1] => 3 [2] => 3.14 [3] => Elo ) 
$tablicaTestowa[] = 'Nowy element';              // dodawanie nowego elmentu
unset($tablicaTestowa[3], $tablicaTestowa[1],);  // usówanie konkretnych elementów

$tablicaTestowa = [4 => 'Ala', 6 => "Ola", "Elo"];
$tablicaTestowa[] = "Nowy";
print_r($tablicaTestowa);                        //= Array ( [4] => Ala [6] => Ola [7] => Elo [8] => Nowy ) 
var_dump(count($tablicaTestowa));                //= int(4)   zwróci iloœæ elementów nie zale¿nie od numerowania indeksów


// TABLICE ASOCJACYJNE ------------------------------------------------------------------------------------------------
- indeksami noga byæ stringi
$user = [
    'firstName' =>'Jan',
    'lastName' => "Kowalski",
    'age' => 22,
	25 => 'Rambo'
];
print_r($user);  //= Array ( [firstName] => Jan [lastName] => Kowalski [age] => 22 [25] => Rambo )
echo($user['age']);  //= 22

$users = [
    [   'firstName' =>'Jan',    'lastName' => "Kowalski",  ],
    [   'firstName' =>'Karol',  'lastName' => "Nowak",     ]
];
echo($users[0]['lastName']);  //= Kowalski

array_map()   przyjmuje: funkcjê, tablicê
//Przyk³ad, z doklejaniem s³owa Hello do ka¿dego elemntu z tablicy:
$users = [4 => 'Ala', 6 => "Ola", "Elo"];
$hello = array_map(
    fn($value) => "Hello ".$value,
    $users
);
print_r($hello);   //= Array ( [4] => Hello Ala [6] => Hello Ola [7] => Hello Elo ) 


  ###               #                #                                                             #
   #                #                #               #                                             #
   #  ####   ###  ##### # ### #    # #   #  ###         ###      #     #  ####  # ### #    # ####  #   #  ###  #     #  ###
   #  #   # #       #   ##    #    # # #   #   #    ## #   #     #     #      # ##    #    # #   # # #   #   # #     # #   #
   #  #   #  ###    #   #     #    # ##    #         # #####     #  #  #  ##### #     #    # #   # ##    #   # #  #  # #####
   #  #   #     #   #   #     #    # # #   #   #     # #         # # # # #    # #     #    # #   # # #   #   # # # # # #
  ### #   #  ###     ## #      ##### #   #  ###  #   #  ###       #   #   ### # #      ##### #   # #   #  ###   #   #   ###
                                                  ###
$age = 20;
if ($age >= 17) {
	echo "Warunek spe³niony";
} else {
	echo "Warunek NIE spe³niony";
}

//zapis bez nawiasów:
if($action === 'create'):
	echo 'nowa notatka';
else:
	echo 'lista notatka';
endif;
//to samo co wy¿ej
$action = $_GET['action'] ?? null;

				
Wartosci false:  0, -0, 0.0, -0.0,  "",  "0",  [],  null

$age = 20;
if ($age >= 17) {
	echo "Warunek spe³niony";
} elseif (($age >= 13)) {
    echo "Warunek dla przedzia³u 13-16";
} else {
    echo "Wszystkie pozosta³e";
}

Ternary operator
$mood = $age >=7 ? 'OK' : 'NIE';

Operatory logiczne:  &&  ||  xor


switch ($age) {
    case 15:
        echo "wykona³o siê $age";
        break;
    default:
        echo 'pozosta³e';
        break;
}


    ####              #     #
    #   #             #     #
    #   #    ###    #####   #        ###
    ####    #   #     #     #       #   #
    #       #####     #     #       #####
    #       #         #     #   #   #
    #        ###       ##    ###     ###
               ##
- for
- foreach
- while
- do-while

for ($i =0; $i<10; $i++) {
    echo "Wykonanie nr $i </br>";
}

for ($i =0; naszaFunkcja(); $i++) {
    echo "Wykonanie nr $i </br>";
}

$names = [ 'Ala', "Ola", "Elo"];
for ($i =0; $i < count($names); $i++) {
    echo "$names[$i] </br>";               // wyœwietli wszystkie elementy
}

$count = 0;
while ($count < 10) {
    $count++;
    if($count==5) continue;
    echo "Wykonanie  $count </br>";
}

$count = 0;
do {
	$count++;
	if($count==6) continue;
	echo "Wykonanie  $count </br>";
} while ($count < 10);

$arrayNames = [ 'Ala', "Ola", "Elo"];
foreach($arrayNames as $el) {
    echo "Wypisz: $el </br>";
}

$arrayNames = [ 'Ala', "Ola", "Elo"];
foreach($arrayNames as $index => $value) {
    echo "Wypisz: $index - $value </br>";  //= Wypisz: 0 - Ala 
}                                          //= Wypisz: 1 - Ola 
                                           //= Wypisz: 2 - Elo 

$movieDetalis = [ 'title' => "Joker", 'directory' => 'Todd Phillips', 'cast' => 'Joaquin Phoenix'];
foreach($movieDetalis as $index => $value) {
    echo "$index: $value </br>";           //= title: Joker 
}	                                       //= directory: Todd Phillips 
                                           //= cast: Joaquin Phoenix 

// W przypadku tablic zagnie¿dzonych
$movieDetalis = [ 'title' => "Joker", 'directory' => 'Todd Phillips', 'cast' => ['actor1' =>'Joaquin Phoenix', 'actor2' =>'Robert de niro'] ];
foreach($movieDetalis as $key => $value) {
    if(is_array($value)) {
        foreach($value as $insideKey => $insideValue) {
            echo "$key - $insideKey: $insideValue </br>";        
        }
    } 
    else echo "$key: $value </br>";
}
										//= title: Joker
											directory: Todd Phillips
											cast - actor1: Joaquin Phoenix
											cast - actor2: Robert de niro 

    #####                    #
    #                        #                   #
    #       #    #   ####    #   #    ###             ###
    ####    #    #   #   #   # #     #   #      ##   #   #
    #       #    #   #   #   ##      #           #   #####
    #       #    #   #   #   # #     #   #       #   #
    #        #####   #   #   #   #    ###    #   #    ###
                                              ###

Nie mo¿na przeci¹¿aæ funkcji
function nazwaFunkcji(argumenty): typWartoœciZwracanej
{
	cia³oFunkcji
}

function sayHello($name = 'Karol') :void
{
    echo "Witaj {$name}";
}
sayHello();				//= Witaj Karol							
											
function sayHello(?string $arg1 ) :void   //nadawanie typów. Znak zapytania umo¿liwia przekazanie null'a
{
    echo "Witaj $arg1 </br>";
}
sayHello('Edek');   //= Witaj Edek 
sayHello(null);		//= Witaj									
											
function sayHello(?string $arg1 ) : int
{
    echo "Witaj $arg1 </br>";
    return ($arg1!=null) ? strlen($arg1) : 0;
}
$len = sayHello('Edek');
sayHello(null);
echo "Liczba liter: $len";											
											
FUNKCJE ANONIMOWE:							
function (argumenty): typWartoœciZwracanej    //brak nazwy funkcji
{
	cia³oFunkcji
};   //œrednik na koñcu

$myFunction = function (string $arg1 ) : void
{
    echo "Witaj $arg1 </br>";
};
$myFunction("Tom");


strlen();  //d³ugoœæ ³añcucha. 
//przyk³¹d z okreœleneim s³ugoœci liczby:
$iloscCyfr = strlen((string) $liczba);

json_encode($text);


CALLABLE
//przekazanie funkcji jako argument
function myCall(callable $func) : void
{
    $func();
}

myCall(function() {
    echo "co kolwiek <br/>";
});
//lub:
$myFunction = function() {
    echo "co kolwiek <br/>";
};
myCall($myFunction);           //= co kolwiek

//callable z argumentem
function myCall(string $name, callable $func) : void {
    $func($name);
}

$myFunction = function($name) : void {
    echo "co kolwiek $name <br/>";
};

myCall("Karol", $myFunction);  //= 	co kolwiek Karol 					
											
fn($value) => $value *2;   //funkcje strza³kowe zawsze coœ zwracaj¹
//zamiast
function ($value) {
    return $value *2;
};											

//Przyk³ad:											
$myFun = fn(int $value): int => $value *2;
$result = $myFun(20);
echo $result;   //=40
											
											
											
											
											
											
											
											

 

losowanie liczby:
	rand(0, 1)
	
	
	
	
	
     ###    #
    #   #   #
    #       #        ####     ###     ###
    #       #            #   #       #
    #       #        #####    ###     ###
    #   #   #   #   #    #       #       #
     ###     ###     ### #    ###     ###


	
    class SomeClass()
    {
        // Sta³e publiczne - bêdziemy o nich mówiæ    
        // Sta³e prywatne - bêdziemy o nich mówiæ    

        // W³aœciwoœci statyczne publiczne - bêdziemy o nich mówiæ
        // W³aœciwoœci statyczne prywatne - bêdziemy o nich mówiæ
        // Metody statyczne publiczne - bêdziemy o nich mówiæ
        // Metody statycznie prywatne - bêdziemy o nich mówiæ

        // W³aœciwoœci publiczne
        // W³aœciwoœci prywatne

        // Konstruktor

        // Metody publiczne
        // Metody prywatne
    }	
	
	
class Samchod
{
    public function __construct(string $kod = '000') {
        self::$wyprodukowano++;
        echo "W³aœnie powsta³o nowe auto, nr: ". self::$wyprodukowano ."<br/>";
        $this->kodKluczyka = $kod;
    }

    public const JAKAS_STALA_PUBLIC = 'p';
    private const JAKAS_STALA = 'a';
    private static int $wyprodukowano =0;
    public $pojemnosc;                        //domyœlna wartoœæ NULL
    public string $brand = "FSO";             // od wersji 7.4 mo¿na deklarowac typ
    public ?string $type = null;
    //protected 
    private string $kodKluczyka;

    public static function IleWyprodukowano() : int {  //funkcja statuczna
        return self::$wyprodukowano;
    }

    public function wewnetrznaMetoda() : void {
        echo "Wykonuje co trzeba. ".self::JAKAS_STALA;  //do staych wewn¹trz dostajemy siê za pomoc¹ self::
    }

    public function uruchomSilnik(): void {
        $this->wewnetrznaMetoda();            //wywo³anie wewnêtrznej funkcji
        echo "Silnik o pojemnoœci ". $this->pojemnosc ." zosta³ uruchomiony.<br/> ";
    }

    public function ustawBieg(int $bieg = 0): ?int  {
        if($bieg === 0) {
            return null;
        }
        echo "Wrzuci³eœ $bieg bieg <br/> ";
        return $bieg;
    }
	
	final public function numerSeryjny() : void {  //funkcja final nie mo¿e byæ zas³oniêta przez potomka
		echo "Tajny kod to: ...";
	}
}


$pojazd = new Samchod();
echo $pojazd->brand."<br/>" ;      //= FSO
$pojazd->pojemnosc = 0.6;
echo $pojazd->pojemnosc."<br/>" ;  //= 0.6
$pojazd->noweCos = 4;
echo $pojazd->noweCos."<br/>";     //= 4
$pojazd->uruchomSilnik();          //= Wykonuje co trzeba. Silnik o pojemnoœci 0.6 zosta³ uruchomiony.
$pojazd->ustawBieg();              // zwróci null, czyli nic nie pisze
$pojazd->ustawBieg(1);             //= Wrzuci³eœ 1 bieg 
echo Samchod::JAKAS_STALA_PUBLIC;  //= p
echo $pojazd::JAKAS_STALA_PUBLIC;  //= p    to wywo³anie nie jest zalecane
echo "Wyprodukowano: ".Samchod::IleWyprodukowano() ."<br/>"; //wywo³anie funkcji statycznej


//DZIEDZICZENIE

class Fiat extends Samchod {
    //dziecko dziedziczy konstruktor
    public function __construct() {  // jeœli stworze swój konstruktor, to on ZAS£ANIA konstruktor rodzica
        parent::__construct();       // jawne wywo³anie konstruktora rodzica
        echo "Konstruktor Fiat <br/>";
    }

    public string $naglosnienie = 'Safari';

}

$fiat126p = new Fiat();
$fiat126p->ustawBieg(4);

//KLASA ABSTRAKCYJNA
//czyli wzozec dla klas potomnych
//nie mo¿na stworzyæ jej instancji
abstract class AbstractParent {
    protected string $text;
    public function __construct(string $text) {
        $this->text = $text;
    }
    abstract public function render(string $param1, array $param2) : string;
    public function nieAbstrkcyjanFunkcja() : void { echo "Tadam!"; }  //mo¿e zawieraæ funkcje nie abstrakcyjne
}
class Child extends AbstractParent {
    public function render(string $param1='', array $param2=[]) : string {
        return '<div><h2>'.$this->text.'</h2></div>';
    }
}

//$rodzic = new AbstractParent();  //ERROR
$dziecko = new Child('Moj tekst');
echo $dziecko->render();



//INTERFEJSY
//Interfejs wychodzi jeszcze poziom wy¿ej ni¿ abstrakcja
interface ExampleInterface {
    public const SOMETHING = 'bar';    //zawiera równie¿ sta³e statyczne
    public function doSomethig1(int $arg) : string;  //funkcje tylko czysto abstrakcyjne (bez cia³a)
    public function doSomethig2(int $arg, string $arg2) : void;
}

class Example implements ExampleInterface {  //mo¿na implenetowac po kilku interfejsach
    public function doSomethig1(int $arg) : string {
        return "Hejka z arg: ".$arg;
    }
    public function doSomethig2(int $arg, string $arg2) : void {
        echo "Wywo³uje doSomethig2 z ".$arg." oraz ".$arg2;
    }
}


$wywolanie = new Example;
$wywolanie->doSomethig2(12, "Hejka"); //Wywo³uje doSomethig2 z 12 oraz Hejka

//FINAL  - blokada dziedziczenia
final class Vehicle {}
//class Car extends Vehicle {} //ERROR


//NAMESPACE

//namespace MyNamespace; //po frazie declare(strict_type=1);
//przyk³ad:
namespace Path_To_Class;
//Aby skorzystaæ z klas z danej "przestrzeni", trzeba zaimportowaæ t¹ przestrzeñ z pomoc¹ "use"
use Path_To_Class;


	
	
	
	
	
	
	
	
	
	